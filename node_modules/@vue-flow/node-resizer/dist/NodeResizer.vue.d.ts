declare const _default: import('vue').DefineComponent<
  {
    nodeId: {
      type: import('vue').PropType<string>
    }
    color: {
      type: import('vue').PropType<string>
    }
    minWidth: {
      type: import('vue').PropType<number>
    }
    minHeight: {
      type: import('vue').PropType<number>
    }
    maxWidth: {
      type: import('vue').PropType<number>
    }
    maxHeight: {
      type: import('vue').PropType<number>
    }
    shouldResize: {
      type: import('vue').PropType<import('./types').ShouldResize>
    }
    keepAspectRatio: {
      type: import('vue').PropType<number | boolean>
    }
    handleClassName: {
      type: import('vue').PropType<string>
    }
    handleStyle: {
      type: import('vue').PropType<import('vue').CSSProperties>
    }
    lineClassName: {
      type: import('vue').PropType<string>
    }
    lineStyle: {
      type: import('vue').PropType<import('vue').CSSProperties>
    }
    isVisible: {
      type: import('vue').PropType<boolean>
      default: boolean
    }
  },
  {},
  unknown,
  {},
  {},
  import('vue').ComponentOptionsMixin,
  import('vue').ComponentOptionsMixin,
  {
    resizeStart: (resizeEvent: import('./types').OnResizeStart) => void
    resize: (resizeEvent: import('./types').OnResize) => void
    resizeEnd: (resizeEvent: import('./types').OnResizeStart) => void
  },
  string,
  import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps,
  Readonly<
    import('vue').ExtractPropTypes<{
      nodeId: {
        type: import('vue').PropType<string>
      }
      color: {
        type: import('vue').PropType<string>
      }
      minWidth: {
        type: import('vue').PropType<number>
      }
      minHeight: {
        type: import('vue').PropType<number>
      }
      maxWidth: {
        type: import('vue').PropType<number>
      }
      maxHeight: {
        type: import('vue').PropType<number>
      }
      shouldResize: {
        type: import('vue').PropType<import('./types').ShouldResize>
      }
      keepAspectRatio: {
        type: import('vue').PropType<number | boolean>
      }
      handleClassName: {
        type: import('vue').PropType<string>
      }
      handleStyle: {
        type: import('vue').PropType<import('vue').CSSProperties>
      }
      lineClassName: {
        type: import('vue').PropType<string>
      }
      lineStyle: {
        type: import('vue').PropType<import('vue').CSSProperties>
      }
      isVisible: {
        type: import('vue').PropType<boolean>
        default: boolean
      }
    }>
  > & {
    onResizeStart?: ((resizeEvent: import('./types').OnResizeStart) => any) | undefined
    onResize?: ((resizeEvent: import('./types').OnResize) => any) | undefined
    onResizeEnd?: ((resizeEvent: import('./types').OnResizeStart) => any) | undefined
  },
  {
    isVisible: boolean
  },
  {}
>
export default _default
